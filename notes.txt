what is servlet? 
	servlet is java class , which extends HttpServlet
	
why we create servlet? 
	accept user's request , process, give response 
		 
how to create servlet? 
1) class extends HttpServlet 
2) service() : override
	public void service(HttpServletRequest request,HttpServletResponse response) 
3) map your servlet with url pattern using -> @WebServlet()



how to link servlet-api.jar in web project ? 

project->right click -> properties -> java build path -> 
libraries -> add external jar -> browse path -> tomcat ->
lib->servlet-api.jar -> open -> order and export -> select all ->
apply and close 




how to read form data in servlet? 
String firstName = request.getParameter("firstName");
 

-------------------------------------------

InputNum.html
			No.1 [   ]
			No.2 [   ] 
					[submit]
					
submit -> request{no1,no2} -> server  
						-> read , next page display 
						-> addition print 
						-> validation 
						
--------------------------------------------------
					

Integer.parseInt() vs XXX ? 
which is good ? 

-----------------------------------------------
JSP -> java server pages / java servlet pages -> 
		dynamic 
				HTML + java
				 
		.jsp ->java -> 		HTML + java
		
		by default -> html
		
		1) scriptlet  <% %> 
		2) expression <%= %>
		3) declaration <%! %>*
---------------------------------------------		



java logic -> <% %> 
print      -> <%= %> 

MVC -> 


servlet --> jsp --> request -> set 
				jsp-> get 


----------------------------------


Servlet -> jsp -> ? 
	RequestDispatcher 
		forward()
		
servlet -> data -> jsp ? 
	request.setAttribute("key",value); 		

jsp -> get {servlet}
	value = request.getAttribute("key");			
----------------------------------		
		
		
		${firstNameError}
		
		${ } -> EL -> expression language 
		
		JSP 
			
		print
		
		${jack} 	
--------------------------------------

//min -> 1 , max -> n 
		//min -> 0 , max -> n 
		//firstName ram1 ->
		//regex 
		//matches -> true / false 
		//format a-zA-Z , data => accepted ? 
		

firstName = jack123
regEx  -> format  { matches() }  true / false  

strength -> 
			1) length >= 8 
			2) 1 digit 
			3) 1 upper 
			4) 1 lower 
			5) 1 special 	

1) radio 
2) validation - regEx - password 

----------------------------------------------------------

filter -> 

	pre process
	
	
	ICICI ->  Login -> request ? 
					india 
					usa 
					
					
	whatsApp ->  Mr x 25 MB -> image ---> Mr Y 
	  
	
	X->25MB->WhatsAppServer->25MB->Y
	 
	X->25MB->compression15MB->WSERVER15MB->Y15MB 

------------------------------------------------------------


.jsp -> request --> server ---> filter | servlet


Name.jsp --> server --> filter {validation ->servlet,back }|servlet --> name read
										 -> upper case convert and print 
 	
-----------------------------------------------------------
steps to create filter:- 

1) class implements Filter  
2) init() doFilter()** destroy() 
3) @WebFilter 

-----------------------------------------------------------
life cycle -> 
	servlet life cycle -> 
	

init()	 
service()
destroy()  
 
Signup.jsp -> action='SignupServlet' data -> submit -> SignupServlet

servlet container -- server -- tomcat -> memory -> SignupSerlvet

1) load class
2) create instance  
3) init()  { 1 time } 
4) service(){logic} 
5) destroy()***{shutdown server}  
 

second time -> load class ? create instance? init()? 
			service() 

third time -> 
			service() 

n time ->  thread 
	1st time init() 
	 all the time service() 
	shutdown -> destroy() 
	
	
init() - 1 time 
destroy() - 1 time 
service() - n time 	
	
--------------------------------------------------------------

 input --> process --> output 
 request -> server -> response 
 .jsp -> request -> server -> servlet -> process -> response -> .jsp
 
 
 
 Signup.jsp -> firstName email password [ submit ] 
 			server -->
 				SignupServlet -->
 						read data 
 						validation { required , regEx }
						save data into database { store data in db } 
 						response ---> {error , success } 
 						


------------------------------------------------------------------


	db connection -- sQL -> mysql | pg | oracle |  -> jar -> driver  
		
		1) download jar -- driver -- connector -- mysqlconnector.jar 
				zip -> extract -> mysql-connector.jar 
					webapp -> WEB-INF -> lib -> paste 

		2) link - project ->
		
		project -> right click -> properties -> java build path -> 
		click on libraries tab -> add jar-> browse -> 
		->project/webapp/web-inf/lib/mysql-connector.jar -> open/ok -> 
		click on order and export tab -> select all -> apply and close 
		
		3) code 
				db connection 
				
		4) create database 
			start press => mysql commandline client -> open -> prompt password -> root -> enter 
			
			create database 23advgenh; 




Connection => database connection -> hold 
PreparedStatement => database query execute => 
	executeUpdate() : insert , update , delete 
	executeQuery()  : select query 


------------------------------------------------------------------------


select * from products; 

servlet -> db connection -> query 


----------------------------------------------------

headers

	request headers -> 
	
	user -> server -> request 
	
	
	Signup -> input -> submit -> server ->SignupServlet{form data}
				hidden information --> server -> request headers ->  
				
				
	server -> lang 
	
	
------------------------------------------------------------------------

session and cookie 


facebook.com -> login -> Home -> 
		post like 
		new post 
		profile update 
		
		how facebook knows ? 
		
	X			Y			Z
	Home		Home		Home 
	 post like 				profile update 
			    new post 	
			    
			    
			    
			    
			    SERVER -> 3 request -> 



Login -> Welcome , X

	user's information ?  
			1) session  --> server side -> most secure 
			2) cookie   --> client side : {browser} 
			
			
			
	user -> server -> request --> XXX | session --> response -> id
	
	www.mysite.com -> request -> page | sessionId  		



-----------------------------------------------------------------------

	session will create by server  -> use 
	
	cookie will created by developer -> client's browser -> set  


----------------------------------------------------------

Cookie d = new Cookie("country","USA");
response.addCookie(d); 


Cookie c[] = request.getCookies();





Cookie -> LoggedIn Yes or No 

abc.com -> 

	abc.com -> already logged in ? Yes -> Home 
							       No  -> Login 
							       

	Login.jsp ->
			email
			password 
			
	LoginServlet -> 
			email XX 
			password XX
				
			logged In 
			
			cookie -> login : yes 
				
			
				


2 fruit -> 

		X -> stamp ->
		
		
		
		
Login.jsp 
		email 
		password 
		
AuthenticateServlet -> email and password - >true -> stamp -> cookie 


abc.com -> stamp ? -> Home.jsp 
				X -> Login.jsp 
				   				
-------------------------------------------------------------------

CLogin.jsp -> email ,password -> submit ->  True Home | False CLogin.jsp 
 
-------------------------------------------------------------------

user info -> cookie , session 

login -> cookie 


cookie ->   information 
session ->  information -> 

session -> create -> server 
           memory -> server 
		   	


cookie -> create -> developer 
		  memory -> client's browser 
		  expiredTime -> 1 year -> default 
		  setMaxAge()  







secretCode -> session store 


1) Mr  A 
2) Mr  B
3) Mr  C 


 




























